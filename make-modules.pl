use v6;

use CSS::Specification::Build;
use CSS::Module::CSS3::Metadata;

class Build {

    method build($where) {

        indir $where, {

            # inherit and subclass CSS3 properties
            my %props = $CSS::Module::CSS3::Metadata::property;

            for (<etc css3x-background-20120724.txt> => <CSS3 Backgrounds_and_Borders>,
                ) {
                my ($input-spec, $class-isa) = .kv;
                my $input-path = $*SPEC.catfile( |@$input-spec );

                for :interface<Interface>,
                    :actions<Actions>,
                    :grammar<Grammar> {
                    my ($type, $subclass) = .kv;
                    my $name = (<CSS Module>, @$class-isa, <Spec>, $subclass).flat.join('::');

                    my $class-dir = $*SPEC.catdir(<lib CSS Module>, @$class-isa, <Spec>);
                    mkdir $class-dir;

                    my $class-path = $*SPEC.catfile($class-dir, $subclass ~ '.pm');

                    say "Building $input-path => $name";
                    temp $*IN  = open $input-path, :r;
                    temp $*OUT = open $class-path, :w;

                    CSS::Specification::Build::generate( $type, $name );
                }

                my @summary = CSS::Specification::Build::summary( :$input-path );
                for @summary {
                    my %detail = %$_;
                    my $prop-name = %detail<name>:delete;
                    %props{$prop-name}{.key} = .value
                        for %detail.pairs;
                }

                my $class-dir = $*SPEC.catdir(<lib CSS Drafts CSS3>);
                my $class-path = $*SPEC.catfile( $class-dir, 'Metadata.pm' );
                my $class-name = 'CSS::Drafts::CSS3::Metadata';
                say "Building $class-name";
                {
                    my $*OUT = open $class-path, :w;
                    say 'use v6;';
                    say "#  -- DO NOT EDIT --";
                    say "# generated by: $*PROGRAM-NAME {@*ARGS}";
                    say '';
                    say "module $class-name \{";
                    say "    our \$property = {%props.item.perl};";
                    say '}';
                }
            }
        }
    }
}

# Build.pm can also be run standalone 
sub MAIN(Str $working-directory = '.') {
    Build.new.build($working-directory);
}
